# -*- coding: utf-8 -*-
"""Bending.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CgBjqeccTtEcLvLRgdG-aDm6o5TqDMZO

# **This code is used to get the results such as Maximum Force, Flexural strength, and Flexural modulus, etc which are obtained after conducting 3-point bending test.**

Firstly, we need to load the Excel files obtained after converting .TRA files
"""

from matplotlib.legend import Shadow
from pandas.core.arrays.sparse import dtype
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

#Reading the excel files
df = pd.read_excel('/content/Specimen32_T5.xlsx', header =163, index_col= None)

#To know the number of rows in the dataframe
actual = df.shape[0]
n = actual - 1

"""After reading excel files, we use this function to calculate Max. Force, Flexural strength, and Flexural modulus based on each specimen"""

#Picking out the Force column from the dataframe
F = np.array(df.iloc[1:,[15]])

#Picking out the Strain column from the dataframe
S = np.array(df.iloc[1:,[4]])

#Specimen number
s = int(input("Specimen number: "))

#Trial number
t = int(input('Trial number:'))

#length between the clamps
L = float(input('Length between the clamps: ')) 
  
#Input value of width(3-pt bending)
b = float(input('Value of width: ' ))

#Input value of thickness(3-pt bending)
h = float(input('Value of thickness:' ))

#Calculation of the area based on the input values
# a = (float(l*b))
  
#Array of the area calculated
# Area = a*np.ones(1)
    
#Maximum value of the Force in an array
f = np.amax(F)

#Maximum value of the displacement in an array
displacement = np.max(S)

#Calculation of the stress
Stress = (3*F*L)/(2*b*h*h)
 

#Maximum value of the stress in an array
x = np.amax(Stress)

        
#Picking out the Force column from the dataframe

Force  = np.array(df.iloc[1:,[15]]).reshape(n)
Strain = np.array(df.iloc[1:,[5]]).reshape(n)
Time   = np.array(df.iloc[1:,[19]]).reshape(n)
Stress = np.array(Stress).reshape(n)
d1     = pd.Series(Force)
d2     = pd.Series(Strain)
d3     = pd.Series(Time)
d4     = pd.Series(Stress)

d1 = d1.to_frame().rename(columns = {0: 'Force'})
d2 = d2.to_frame().rename(columns = {0: 'Strain'})
d3 = d3.to_frame().rename(columns = {0: 'Time'})
d4 = d4.to_frame().rename(columns= {0: 'Stress'})

d1['Force']  = d1['Force'].astype('float') # Change column type to integer
d2['Strain'] = d2['Strain'].astype('float')
d3['Time']   = d3['Time'].astype('float')
d4['Stress'] = d4['Stress'].astype('float')
d = pd.concat([d1, d2, d3, d4], axis=1)
d

#Calculation of deflection

#deflection for 0.0005
s1 = (0.0005 * L*L)/(6*h)

#deflection for 0.0025
s2 = (0.0025 * L*L)/(6*h)

# finding the stress at strain = 0.0005 which is referred as intial force 
stress_values = d.loc[(d['Strain'] <= s1)]
# print(stress_values)
y_stress = stress_values.loc[stress_values['Strain'] <= s1]

num_of_rows = y_stress.shape[0]
actual_num = num_of_rows - 1

y_stress = y_stress.iloc[actual_num, 3]
y_stress
f_s1 = y_stress
# print(f_s1)

# finding the displacement at strain = 0.0005 which is referred as intial force 
strain_values = d.loc[(d['Strain'] <= s1)]
# print(strain_values)
y_strain = strain_values.loc[strain_values['Strain'] <= s1]

num_of_rows = y_strain.shape[0]
actual_num = num_of_rows - 1

y_strain = y_strain.iloc[actual_num, 1]
y_strain
strain_s1 = y_strain
# print(strain_s1)

# finding the stress at strain = 0.0025 which is referred as intial force 
stress_values_2 = d.loc[(d['Strain'] <= s2)]
# print(stress_values_2)
y1_stress = stress_values_2.loc[stress_values_2['Strain'] <= s2]

num_of_rows = y1_stress.shape[0]
actual_num = num_of_rows - 1

y1_stress = y1_stress.iloc[actual_num, 3]
y1_stress
f_s2 = y1_stress
# print(f_s2)

# finding the displacement at strain = 0.0025 which is referred as intial force 
strain_values2 = d.loc[(d['Strain'] <= s2)]
# print(strain_values2)
y_strain2 = strain_values2.loc[strain_values2['Strain'] <= s2]

num_of_rows = y_strain2.shape[0]
actual_num = num_of_rows - 1

y_strain2 = y_strain2.iloc[actual_num, 1]
y_strain2
strain_s2 = y_strain2
# print(strain_s1)


z = (f_s2-f_s1)/(0.0025-0.0005)
print(z)


# index = d.index
# index_min_stress = d['Stress'] == f_s1
# i = index[index_min_stress]

# index1 = d.index
# index_max_stress = d['Stress'] == f_s2
  
# i1 = index[index_max_stress]

# a = d4.loc[i[0]:i1[1]] or d4.loc[i[0]:i1[0]]
# a

# index2 = d.index
# index_min_strain = d['Strain'] == y_strain
# i2 = index[index_min_strain]
# i2
# index3 = d.index
# index_max_strain = d['Strain'] == y_strain2
# i3 = index[index_max_strain]
# i3
# b = d2.loc[i2[0]:i3[0]]                                                   
# b

#Dataframe
dataframe = {'Specimen number':[s],'Trial Number': [t],  'Max force(N)': [f], 'Max displacement': [displacement],'Max stress/Flexural strength(MPa)': [x],
     'Flexural Modulus(MPa)': [z]}
  
# plt.plot(b, a)
# s_num = input('Specimen num:' )
# t_num = input('Trial:' )
# plt.title('Stress Vs Strain graph for specimen '  + s_num + "T"+t_num )
# plt.ylabel('Stress(N/mm2)')
# plt.xlabel('Strain')
# plt.show()

pd.DataFrame(data = dataframe, index=[0])